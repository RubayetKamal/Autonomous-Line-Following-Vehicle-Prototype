

// Define color sensor pins

#define S0 A2
#define S1 A1
#define S2 0
#define S3 1
#define sensorOut A0

// Calibration Values
// Get these from Calibration Sketch

int redMin =3; // Red minimum value
int redMax = 6; // Red maximum value

int blueMin = 10; // Blue minimum value
int blueMax = 18; // Blue maximum value

// Variables for Color Pulse Width Measurements

int redPW = 0;
int bluePW = 0;

// Variables for final Color values

int redValue;
int blueValue;

void setup() {

  // Set S0 - S3 as outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  
  // Set Sensor output as input
  pinMode(sensorOut, INPUT);
  
  // Set Frequency scaling to 100%
  digitalWrite(S0,HIGH);
  digitalWrite(S1,HIGH);
  
  // Setup Serial Monitor
  Serial.begin(9600);
}

void loop() {
  
  // Read Red value
  redPW = getRedPW();
  // Map to value from 0-255
  redValue = map(redPW, redMin,redMax,255,0);
  redValue = constrain(redValue,0,255);
  // Delay to stabilize sensor
  delay(200);
  
  // Read Blue value
  bluePW = getBluePW();
  // Map to value from 0-255
  blueValue = map(bluePW, blueMin,blueMax,255,0);
  blueValue = constrain(blueValue,0,255);
  // Delay to stabilize sensor
  delay(200);
  
  // Print output to Serial Monitor
  Serial.print("Red = ");
  Serial.print(redValue);
  //Serial.print(redPW);

  Serial.print(" - Blue = ");
  Serial.println(blueValue);
  //Serial.println(bluePW);

if((redPW>= 50 && redPW<=70 && greenPW>= 160 && greenPW<=180 && bluePW>=150 && bluePW<=180) || (redPW>= 40 && redPW<=80 && greenPW>= 75 && greenPW<=85 && bluePW>=75 && bluePW<=81) ){
      Serial.println("GreenFound");
    }else if((redPW >= 29 && redPW <=31  && greenPW>=134  && greenPW<=137) || (redPW >= 40 && redPW <=50  && greenPW>=240)){
    Serial.println("RedFound");}
    else if(redPW>=220 && redPW>=140){
      Serial.println("BlueFound");
    }
  
  
}


// Function to read Red Pulse Widths
int getRedPW() {

  // Set sensor to read Red only
  digitalWrite(S2,LOW);
  digitalWrite(S3,LOW);
  // Define integer to represent Pulse Width
  int PW;
  // Read the output Pulse Width
  PW = pulseIn(sensorOut, LOW);
  // Return the value
  return PW;

}

// Function to read Blue Pulse Widths
int getBluePW() {

  // Set sensor to read Blue only
  digitalWrite(S2,LOW);
  digitalWrite(S3,HIGH);
  // Define integer to represent Pulse Width
  int PW;
  // Read the output Pulse Width
  PW = pulseIn(sensorOut, LOW);
  // Return the value
  return PW;

}
